#!/usr/bin/env bash
# i2, i2 Group, the i2 Group logo, and i2group.com are trademarks of N.Harris Computer Corporation.
# Â© N.Harris Computer Corporation (2022-2023)
#
# SPDX short identifier: MIT

set -e

if [[ -z "${ANALYZE_CONTAINERS_ROOT_DIR}" ]]; then
  echo "ANALYZE_CONTAINERS_ROOT_DIR variable is not set"
  echo "This project should be run inside a VSCode Dev Container. For more information read, the Getting Started guide at https://i2group.github.io/analyze-containers/content/getting_started.html"
  exit 1
fi

# Load common functions
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/common_functions.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/server_functions.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/client_functions.sh"

# Load common variables
source "${ANALYZE_CONTAINERS_ROOT_DIR}/examples/pre-prod/utils/simulated_external_variables.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/common_variables.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/internal_helper_variables.sh"

set_dependencies_tag_if_necessary
check_environment_is_valid
check_env_vars_are_set
check_licenses_accepted_if_required "${ENVIRONMENT}"

###############################################################################
# Functions                                                                   #
###############################################################################

function deploy_zk_cluster() {
  run_zk "${ZK1_CONTAINER_NAME}" "${ZK1_FQDN}" "${ZK1_DATA_VOLUME_NAME}" "${ZK1_DATALOG_VOLUME_NAME}" "${ZK1_LOG_VOLUME_NAME}" 1 "zk1" "${ZK1_SECRETS_VOLUME_NAME}"
  run_zk "${ZK2_CONTAINER_NAME}" "${ZK2_FQDN}" "${ZK2_DATA_VOLUME_NAME}" "${ZK2_DATALOG_VOLUME_NAME}" "${ZK2_LOG_VOLUME_NAME}" 2 "zk2" "${ZK2_SECRETS_VOLUME_NAME}"
  run_zk "${ZK3_CONTAINER_NAME}" "${ZK3_FQDN}" "${ZK3_DATA_VOLUME_NAME}" "${ZK3_DATALOG_VOLUME_NAME}" "${ZK3_LOG_VOLUME_NAME}" 3 "zk3" "${ZK3_SECRETS_VOLUME_NAME}"
}

function deploy_solr_cluster() {
  print "Running secure Solr containers"
  ### Run solr1
  run_solr "${SOLR1_CONTAINER_NAME}" "${SOLR1_FQDN}" "${SOLR1_VOLUME_NAME}" 8983 "solr1" "${SOLR1_SECRETS_VOLUME_NAME}"
  ### Run solr2
  run_solr "${SOLR2_CONTAINER_NAME}" "${SOLR2_FQDN}" "${SOLR2_VOLUME_NAME}" 8984 "solr2" "${SOLR2_SECRETS_VOLUME_NAME}"
}

function configure_zk_for_solr_cluster() {
  print "Configuring ZK Cluster for Solr"
  run_solr_client_command solr zk mkroot "/${SOLR_CLUSTER_ID}" -z "${ZK_MEMBERS}"
  if [[ "${SOLR_ZOO_SSL_CONNECTION}" == true ]]; then
    run_solr_client_command "/opt/solr/server/scripts/cloud-scripts/zkcli.sh" -zkhost "${ZK_HOST}" -cmd clusterprop -name urlScheme -val https
  fi
  run_solr_client_command bash -c "echo \"\${SECURITY_JSON}\" > /tmp/security.json && solr zk cp /tmp/security.json zk:/security.json -z ${ZK_HOST}"
}

function configure_solr_collection() {
  local collection_name="$1"
  local collection_type="${2:-$1}"
  run_solr_client_command solr zk upconfig -v -z "${ZK_HOST}" -n "${collection_name}" -d /opt/configuration/solr/generated_config/"${collection_type}"
}

function configure_solr_collections() {
  print "Configuring Solr collections"
  run_i2_analyze_tool "/opt/i2-tools/scripts/generateSolrSchemas.sh"
  configure_solr_collection "daod_index"
  configure_solr_collection "main_index"
  configure_solr_collection "chart_index"
  configure_solr_collection "highlight_index"
  configure_solr_collection "match_index1" "match_index"
  configure_solr_collection "match_index2" "match_index"
  configure_solr_collection "vq_index"
  configure_solr_collection "recordshare_index"
}

function create_solr_cluster_policy() {
  print "Creating Solr cluster policy"
  # The curl command uses the container's local environment variables to obtain the SOLR_ADMIN_DIGEST_USERNAME and SOLR_ADMIN_DIGEST_PASSWORD.
  # To stop the variables being evaluated in this script, the variables are escaped using backslashes (\) and surrounded in double quotes (").
  # Any double quotes in the curl command are also escaped by a leading backslash.
  run_solr_client_command bash -c "curl -u \"\${SOLR_ADMIN_DIGEST_USERNAME}:\${SOLR_ADMIN_DIGEST_PASSWORD}\" --cacert ${CONTAINER_CERTS_DIR}/CA.cer -X POST -H Content-Type:text/xml -d '{ \"set-cluster-policy\": [ {\"replica\": \"<2\", \"shard\": \"#EACH\", \"host\": \"#EACH\"}]}' \"${SOLR1_BASE_URL}/api/cluster/autoscaling\""
}

function create_solr_collection() {
  local collection_name="$1"
  # The curl command uses the container's local environment variables to obtain the SOLR_ADMIN_DIGEST_USERNAME and SOLR_ADMIN_DIGEST_PASSWORD.
  # To stop the variables being evaluated in this script, the variables are escaped using backslashes (\) and surrounded in double quotes (").
  # Any double quotes in the curl command are also escaped by a leading backslash.
  local expected_status=0
  local response
  local status

  response=$(run_solr_client_command bash -c "curl -u \"\${SOLR_ADMIN_DIGEST_USERNAME}:\${SOLR_ADMIN_DIGEST_PASSWORD}\" --cacert ${CONTAINER_CERTS_DIR}/CA.cer \"${SOLR1_BASE_URL}/solr/admin/collections?action=CREATE&name=${collection_name}&collection.configName=${collection_name}&numShards=1&maxShardsPerNode=4&replicationFactor=2\"")
  echo "${response}"
  status=$(echo "${response}" | jq -r '.responseHeader.status')
  if [[ "${status}" != "${expected_status}" ]]; then
    print_error_and_exit "Failed to create Solr Collection ${collection_name}"
  fi
}

function create_solr_collections() {
  print "Creating Solr collections"
  create_solr_collection "main_index"
  create_solr_collection "match_index1"
  create_solr_collection "match_index2"
  create_solr_collection "chart_index"
  create_solr_collection "daod_index"
  create_solr_collection "highlight_index"
  create_solr_collection "vq_index"
  create_solr_collection "recordshare_index"
}

function initialize_istore_database() {
  print "Initializing ISTORE database"

  print "Generating ISTORE scripts"
  run_i2_analyze_tool "/opt/i2-tools/scripts/generateInfoStoreToolScripts.sh"
  run_i2_analyze_tool "/opt/i2-tools/scripts/generateStaticInfoStoreCreationScripts.sh"
  run_sql_server_command_as_sa "/opt/databaseScripts/generated/runDatabaseCreationScripts.sh"

  print "Creating database roles"
  run_sql_server_command_as_sa "/opt/db-scripts/create_db_roles.sh"

  print "Creating database logins and users"
  create_db_login_and_user "dbb" "db_backupoperator"
  create_db_login_and_user "dba" "DBA_Role"
  create_db_login_and_user "i2analyze" "i2Analyze_Role"
  create_db_login_and_user "i2etl" "i2_ETL_Role"
  create_db_login_and_user "etl" "External_ETL_Role"
  run_sql_server_command_as_sa "/opt/db-scripts/configure_dba_roles_and_permissions.sh"
  run_sql_server_command_as_sa "/opt/db-scripts/add_etl_user_to_sys_admin_role.sh"

  print "Initializing IStore database tables"
  run_sql_server_command_as_dba "/opt/databaseScripts/generated/runStaticScripts.sh"
}

function deploy_secure_sql_server() {
  docker volume create "${SQL_SERVER_BACKUP_VOLUME_NAME}"
  run_sql_server
  wait_for_sql_server_to_be_live "true"
  change_sa_password
}

function configure_istore_database() {
  print "Configuring IStore database"
  run_i2_analyze_tool "/opt/i2-tools/scripts/generateDynamicInfoStoreCreationScripts.sh"
  run_sql_server_command_as_dba "/opt/databaseScripts/generated/runDynamicScripts.sh"
}

function deploy_liberty() {
  ### Run liberty1
  run_liberty "${LIBERTY1_CONTAINER_NAME}" "${LIBERTY1_FQDN}" "${LIBERTY1_VOLUME_NAME}" "${LIBERTY1_SECRETS_VOLUME_NAME}" "${LIBERTY1_PORT}" "${LIBERTY1_CONTAINER_NAME}" "${LIBERTY1_DEBUG_PORT}"
  ### Run liberty2
  run_liberty "${LIBERTY2_CONTAINER_NAME}" "${LIBERTY2_FQDN}" "${LIBERTY2_VOLUME_NAME}" "${LIBERTY2_SECRETS_VOLUME_NAME}" "${LIBERTY2_PORT}" "${LIBERTY2_CONTAINER_NAME}" "${LIBERTY2_DEBUG_PORT}"
  ### Run load_balancer
  run_load_balancer
}

function update_match_rules() {
  ### Upload match rules
  print "Uploading system match rules"
  run_i2_analyze_tool "/opt/i2-tools/scripts/runIndexCommand.sh" update_match_rules

  ### Wait for indexes to be built
  wait_for_indexes_to_be_built "match_index1"

  ### Switch standby match index to live
  print "Switching standby match index to live"
  run_i2_analyze_tool "/opt/i2-tools/scripts/runIndexCommand.sh" switch_standby_match_index_to_live
}

function configure_i2_analyze() {
  print "Configuring the i2 Analyze application server in HA mode"
  build_liberty_configured_image_for_pre_prod
  deploy_liberty
  wait_for_i2_analyze_service_to_be_live
  update_match_rules
}

function configure_example_connector() {
  run_example_connector "${CONNECTOR1_CONTAINER_NAME}" "${CONNECTOR1_FQDN}" "${CONNECTOR1_CONTAINER_NAME}" "${CONNECTOR1_SECRETS_VOLUME_NAME}"
  wait_for_connector_to_be_live "${CONNECTOR1_FQDN}"
}

function create_data_source_id() {
  local dsid_properties_file_path="${LOCAL_CONFIG_DIR}/environment/dsid/dsid.infostore.properties"

  create_dsid_properties_file "${dsid_properties_file_path}"
}

EXTENSIONS_DEV="true"
###############################################################################
# Cleaning up Docker resources                                                #
###############################################################################
clean_up_docker_resources

###############################################################################
# Creating Docker network                                                     #
###############################################################################
create_docker_network "${DOMAIN_NAME}"

###############################################################################
# Create dsid.infostore.properties file                                       #
###############################################################################
create_data_source_id

###############################################################################
# Running Solr and ZooKeeper                                                  #
###############################################################################
deploy_zk_cluster
configure_zk_for_solr_cluster
deploy_solr_cluster

###############################################################################
# Initializing the Information Store database                                 #
###############################################################################
deploy_secure_sql_server
initialize_istore_database

###############################################################################
# Configuring Solr and ZooKeeper                                              #
###############################################################################
wait_for_solr_to_be_live "${SOLR1_FQDN}"
configure_solr_collections
create_solr_cluster_policy
create_solr_collections

###############################################################################
# Configuring Information Store database                                      #
###############################################################################
configure_istore_database

###############################################################################
# Configuring Example Connector                                               #
###############################################################################
configure_example_connector

###############################################################################
# Configuring i2 Analyze                                                      #
###############################################################################
configure_i2_analyze

###############################################################################
# Running Prometheus and Grafana                                              #
###############################################################################
configure_prometheus_for_pre_prod
run_prometheus
wait_for_prometheus_server_to_be_live
run_grafana
wait_for_grafana_server_to_be_live

set +e

print_success "Pre-prod environment deployed"
