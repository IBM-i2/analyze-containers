#!/usr/bin/env bash
# i2, i2 Group, the i2 Group logo, and i2group.com are trademarks of N.Harris Computer Corporation.
# Â© N.Harris Computer Corporation (2022)
#
# SPDX short identifier: MIT

set -e

if [[ -z "${ANALYZE_CONTAINERS_ROOT_DIR}" ]]; then
  echo "ANALYZE_CONTAINERS_ROOT_DIR variable is not set" >&2
  echo "This project should be run inside a VSCode Dev Container. For more information read, the Getting Started guide at https://i2group.github.io/analyze-containers/content/getting_started.html" >&2
  exit 1
fi

USAGE="""
Usage:
  manage-data -c <config_name> -t {ingest} -d <data_set> -s <script_name> [-y] [-v]
  manage-data -c <config_name> -t {sources} [-s <script_name>] [-y] [-v]
  manage-data -c <config_name> -t {delete} [-y] [-v]
  manage-data -h

Options:
  -c <config_name>             Name of the config to use.
  -t {delete|ingest|sources}   The task to run. Either delete or ingest data, or add ingestion sources. Delete permanently removes all data from the database.
  -d <data_set>                Name of the data set to ingest.
  -s <script_name>             Name of the ingestion script file. If running the 'sources' task, this will default to 'create-ingestion-sources'
  -y                           Answer 'yes' to all prompts.
  -v                           Verbose output.
  -h                           Display the help.
"""

source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/common_functions.sh"

# Parse arguments
OPTIONS_FOR="manageData"
parse_arguments "$@"

[[ "${TASK}" == "ingest" || "${TASK}" == "delete" || "${TASK}" == "sources" ]] || print_usage 1

if [[ -z "${CONFIG_NAME}" ]]; then
  print_usage 1
fi

if [[ "${TASK}" == "ingest" ]]; then
  if [[ -z "${DATA_SET}" ]] || [[ -z "${SCRIPT_NAME}" ]]; then
    print_usage 1
  fi
fi

# Load common functions
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/server_functions.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/client_functions.sh"

# Load common variables
source "${ANALYZE_CONTAINERS_ROOT_DIR}/configs/${CONFIG_NAME}/utils/variables.conf"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/simulated_external_variables.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/common_variables.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/internal_helper_variables.sh"
warn_root_dir_not_in_path
check_docker_is_running
set_dependencies_tag_if_necessary

function run_script() {
  local script_path="$1"

  if [[ ! -f "${script_path}" ]]; then
    print_error_and_exit "${script_path} doesn't exist"
  fi

  print "Running $1"
  . "${script_path}"
}

function run_ingestion_script() {
  local script_path="${ANALYZE_CONTAINERS_ROOT_DIR}/i2a-data/${DATA_SET}/scripts/${SCRIPT_NAME}"
  run_script "${script_path}"
}

function create_ingestion_sources() {
  local script_name="$1"
  local default_script_name="create-ingestion-sources"
  local script_path

  if [[ -z "${script_name}" ]]; then
    script_path="${LOCAL_USER_CONFIG_DIR}/ingestion/scripts/${default_script_name}"
  else
    script_path="${LOCAL_USER_CONFIG_DIR}/ingestion/scripts/${script_name}"
  fi

  run_script "${script_path}"
}

function clear_info_store() {
  print "Clearing the InfoStore database"
  case "${DB_DIALECT}" in
  db2)
    run_db2_server_command_as_db2inst1 "/opt/databaseScripts/generated/runClearInfoStoreData.sh"
    ;;
  sqlserver)
    run_sql_server_command_as_dba "/opt/databaseScripts/generated/runClearInfoStoreData.sh"
    ;;
  postgres)
    run_postgres_server_command_as_dba "/opt/databaseScripts/generated/runClearInfoStoreData.sh"
    ;;
  esac
}

function run_clear_data() {
  print "Clearing Data"
  clear_search_index
  clear_info_store
}

function remove_liberty_container() {
  print_info "Removing existing Liberty container"
  delete_container "${LIBERTY1_CONTAINER_NAME}"
}

function start_liberty_container() {
  print_info "Starting up new Liberty container"
  run_liberty "${LIBERTY1_CONTAINER_NAME}" "${I2_ANALYZE_FQDN}" "${LIBERTY1_VOLUME_NAME}" "${LIBERTY1_SECRETS_VOLUME_NAME}" "${HOST_PORT_I2ANALYZE_SERVICE}" "${I2_ANALYZE_CERT_FOLDER_NAME}" "${LIBERTY1_DEBUG_PORT}"
  update_log4j_file
  add_config_admin
  check_liberty_status
}

function check_data_set_exists() {
  print_info "Checking the data set ${DATA_SET} exists"
  local data_set_folder_path="${ANALYZE_CONTAINERS_ROOT_DIR}/i2a-data/${DATA_SET}"
  if [[ ! -d "${data_set_folder_path}" ]]; then
    print_error_and_exit "${data_set_folder_path} does NOT exist"
  else
    print_info "${data_set_folder_path} exist"
  fi
}

function main() {
  check_deployment_is_live "${CONFIG_NAME}"

  if [[ "${TASK}" == "ingest" ]]; then
    check_data_set_exists
    run_ingestion_script
  elif [[ "${TASK}" == "delete" ]]; then
    remove_liberty_container
    run_clear_data
    start_liberty_container
  elif [[ "${TASK}" == "sources" ]]; then
    create_ingestion_sources "${SCRIPT_NAME}"
  fi
}

main "$@"
