#!/usr/bin/env bash
# i2, i2 Group, the i2 Group logo, and i2group.com are trademarks of N.Harris Computer Corporation.
# Â© N.Harris Computer Corporation (2022-2023)
#
# SPDX short identifier: MIT

set -e

if [[ -z "${ANALYZE_CONTAINERS_ROOT_DIR}" ]]; then
  ANALYZE_CONTAINERS_ROOT_DIR=$(
    pushd . 1>/dev/null
    while [ "$(pwd)" != "/" ]; do
      test -e .root && grep -q 'Analyze-Containers-Root-Dir' <'.root' && {
        pwd
        break
      }
      cd ..
    done
    popd 1>/dev/null || exit
  )
  export ANALYZE_CONTAINERS_ROOT_DIR
fi

USAGE="""
Usage:
  configure-paths -t {shared|upgrade} [-p <path>] [-v] [-y]
  configure-paths -t {shared|upgrade} -d [-v] [-y]
  configure-paths -t {external} -n <name> -p <path> [-v] [-y]
  configure-paths -t {external} -n <name> -d [-v] [-y]
  configure-paths -h

Options:
  -t {shared}                            Adds the shared config root directory to the path-configuration.json file. By default: ~/analyze-containers/my-configurations
  -t {upgrade}                           Adds the upgrade directory to the path-configuration.json file. by default: ~/analyze-containers
  -t {external}                          Adds an external directory to the path-configuration.json.
  -n <name>                              Name of the external directory to add.
  -p <path>                              The full path to the directory.
  -d                                     Delete the path for the specified task.
  -v                                     Verbose output.
  -y                                     Answer 'yes' to all prompts.
  -h                                     Display the help.
"""

source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/common_functions.sh"

OPTIONS_FOR="configurePaths"
parse_arguments "$@"
# Delete can be executed inside the devcontainer
if [[ "${DEVCONTAINER}" == "true" && "${DELETE_PATH_FLAG}" != "true" ]]; then
  if [[ "${DEV_MODE}" == "true" ]]; then
    print_warn "[Dev Mode] This script should run in your local shell"
  else
    print_error_and_exit "You must run this script from your local shell."
  fi
fi

function validate_arguments() {
  if [[ -n "${TASK}" && "${TASK}" != "upgrade" && "${TASK}" != "shared" && "${TASK}" != "external" ]]; then
    print_error_and_usage "${TASK} is not supported."
  fi

  if [[ "${TASK}" == "external" && -z "${PATH_NAME}" ]]; then
    print_error_and_usage "Task 'external' requires -n flag."
  fi

  if [[ "${TASK}" == "external" && -z "${PATH_TO_DIR}" && "${DELETE_PATH_FLAG}" != "true" ]]; then
    print_error_and_usage "Task 'external' requires -p flag."
  fi
}

###############################################################################
# Function Definitions                                                        #
###############################################################################

function source_common_variables_and_scripts() {
  source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/client_functions.sh"
  source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/common_variables.sh"
  source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/simulated_external_variables.sh"
  source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/internal_helper_variables.sh"

  warn_root_dir_not_in_path
  set_dependencies_tag_if_necessary
}

function run_dev_container_script() {
  local interactive="$1"
  local extra_args=()
  if [[ "${interactive}" == "true" ]]; then
    extra_args+=("-it")
  fi

  docker run \
    --rm \
    "${extra_args[@]}" \
    -v "${ANALYZE_CONTAINERS_ROOT_DIR}:${ANALYZE_CONTAINERS_ROOT_DIR}" \
    -e ANALYZE_CONTAINERS_ROOT_DIR="${ANALYZE_CONTAINERS_ROOT_DIR}" \
    -u "$(id -u):$(id -g)" \
    --entrypoint "" \
    i2group/i2eng-analyze-containers-dev:1.1 \
    "${@:2}"
}

function run_mount_task() {
  local path_list

  IFS=' ' read -ra path_list <<<"$(run_dev_container_script "false" \
    "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/containers/create-mounts" -t list | xargs)"

  # Validate paths exist
  for path in "${path_list[@]}"; do
    if [[ ! -d "${path}" ]]; then
      print_error_and_exit "NOT a valid path: ${path}"
    fi
  done

  # Create mounts
  run_dev_container_script "false" "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/containers/create-mounts"
}

function check_empty_dir() {
  local path="$1"
  local extra_args=()
  if [[ -n "$2" ]]; then
    extra_args+=("!" "-path" "$2")
  fi
  if [[ $(find "${path}" -mindepth 1 -maxdepth 1 -type d "${extra_args[@]}" -not -name ".*" -print0 | xargs -0) ]]; then
    echo "Path ${path} is not empty. Cannot configure for upgrade."
    exit 1
  fi
}

function update_path_config_file() {
  if [[ "${TASK}" == "shared" && "${DELETE_PATH_FLAG}" != "true" ]]; then
    if [[ -z "${PATH_TO_DIR}" ]]; then
      PATH_TO_DIR="${HOME}/my-configurations"
      mkdir -p "${PATH_TO_DIR}"
    fi
    if [[ -d "${PATH_TO_DIR}" && ! -f "${PATH_TO_DIR}/.vscode/settings.json" ]]; then
      mkdir -p "${PATH_TO_DIR}/.vscode"
      # shellcheck disable=SC2028
      echo "{
          \"terminal.integrated.profiles.osx\": {
              \"bash\": {
                  \"path\": \"/usr/local/opt/bash/bin/bash\",
                  \"icon\": \"terminal-bash\"
              }
          },
          \"terminal.integrated.defaultProfile.osx\": \"bash\",
          \"files.exclude\": {
              \"**/.*\": true
          },
          \"terminal.integrated.defaultProfile.windows\": \"C:\\\\WINDOWS\\\\System32\\\\wsl.exe\"
      }" >"${PATH_TO_DIR}/.vscode/settings.json"
    fi
  fi

  if [[ "${TASK}" == "upgrade" && "${DELETE_PATH_FLAG}" != "true" ]]; then
    if [[ -z "${PATH_TO_DIR}" ]]; then
      PATH_TO_DIR="${HOME}/analyze-containers"
    fi

    # Ensure it is a clean analyze-containers
    check_empty_dir "${ANALYZE_CONTAINERS_ROOT_DIR}/configs"
    check_empty_dir "${ANALYZE_CONTAINERS_ROOT_DIR}/connector-images"
    check_empty_dir "${ANALYZE_CONTAINERS_ROOT_DIR}/additional-resources"
    check_empty_dir "${ANALYZE_CONTAINERS_ROOT_DIR}/i2a-data"
    check_empty_dir "${ANALYZE_CONTAINERS_ROOT_DIR}/i2a-plugins"
    check_empty_dir "${ANALYZE_CONTAINERS_ROOT_DIR}/i2a-extensions" "*/target"
    if [[ $(find "${ANALYZE_CONTAINERS_ROOT_DIR}/gateway-schemas" -type f -not -name ".*" -print0 | xargs -0) ]]; then
      print_error_and_exit "Path ${ANALYZE_CONTAINERS_ROOT_DIR}/gateway-schemas is not empty. Cannot configure for upgrade."
    fi
    if [[ -f "${PATH_TO_DIR}/path-configuration.json" ]]; then
      if [[ -f "${ANALYZE_CONTAINERS_ROOT_DIR}/path-configuration.json" && $(run_dev_container_script "false" jq -r '.' "${ANALYZE_CONTAINERS_ROOT_DIR}/path-configuration.json") != "{}" ]]; then
        wait_for_user_reply "Your path-configuration.json file will be overridden. Are you sure you want to continue?"
      fi
      cp "${PATH_TO_DIR}/path-configuration.json" "${ANALYZE_CONTAINERS_ROOT_DIR}/path-configuration.json"
    fi
  fi

  if [[ ! -d "${PATH_TO_DIR}" && "${DELETE_PATH_FLAG}" != "true" ]]; then
    print_error_and_exit "NOT a valid path: ${PATH_TO_DIR}"
  fi

  extra_args=()
  if [[ -n "${YES_FLAG}" ]]; then
    extra_args+=("-y")
  fi
  if [[ -n "${VERBOSE}" ]]; then
    extra_args+=("-v")
  fi
  if [[ -n "${PATH_NAME}" ]]; then
    extra_args+=("-n" "${PATH_NAME}")
  fi
  if [[ -n "${PATH_TO_DIR}" ]]; then
    extra_args+=("-p" "${PATH_TO_DIR}")
  fi
  if [[ "${DELETE_PATH_FLAG}" == "true" ]]; then
    extra_args+=("-d")
  fi

  run_dev_container_script "true" "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/containers/update-config-paths" \
    -t "${TASK}" "${extra_args[@]}"
}

function main() {
  source_common_variables_and_scripts
  validate_arguments
  if [[ -n "${TASK}" ]]; then
    update_path_config_file
  fi
  run_mount_task
}

main "$@"
