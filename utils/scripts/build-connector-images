#!/usr/bin/env bash
# i2, i2 Group, the i2 Group logo, and i2group.com are trademarks of N.Harris Computer Corporation.
# Â© N.Harris Computer Corporation (2022)
#
# SPDX short identifier: MIT

set -e

USAGE="""
Usage:
  build-connector-images
  build-connector-images -a -d <deployment_name>
  build-connector-images [-i <connector1_name>] [-e <connector1_name>]
  build-connector-images -h

Options:
  -a Produce or use artifacts on AWS.
  -d <deployment_name>  Name of deployment to use on AWS.
  -i <connector_name>   Names of the connectors to deploy and update. To specify multiple connectors, add additional -i options.
  -e <connector_name>   Names of the connectors to deploy and update. To specify multiple connectors, add additional -e options.
  -v                    Verbose output.
  -y                    Answer 'yes' to all prompts.
  -h                    Display the help.
"""

source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/common_functions.sh"

OPTIONS_FOR="buildConnectorImages"
parse_arguments "$@"

if [[ -z "${ENVIRONMENT}" ]]; then
  ENVIRONMENT="config-dev"
fi

if [[ -z "${YES_FLAG}" ]]; then
  YES_FLAG="false"
fi

if [[ "${INCLUDED_CONNECTORS[*]}" && "${EXCLUDED_CONNECTORS[*]}" ]]; then
  print_error "Incompatible options: Both (-i) and (-e) were specified."
  print_usage 1
fi

# Load common functions
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/server_functions.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/client_functions.sh"

# Load common variables
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/simulated_external_variables.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/common_variables.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/internal_helper_variables.sh"

function validate_connector_version() {
  local connector_name="$1"
  local connector_type="$2"
  local config_connector_version
  local declared_connector_version
  local config_i2connect_server_version
  local declared_i2connect_server_version
  local connector_version_file_path="${CONNECTOR_IMAGES_DIR}/${connector_name}/connector-version.json"
  local package_json_file_path="${CONNECTOR_IMAGES_DIR}/${connector_name}/app/package.json"
  local i2connect_version_file_path="${CONNECTOR_IMAGES_DIR}/i2connect-server-version.json"

  config_connector_version=$(jq -r '.version' <"${connector_version_file_path}")
  declared_connector_version=$(jq -r '.version' <"${package_json_file_path}")
  config_i2connect_server_version=$(jq -r '.version' <"${i2connect_version_file_path}")
  declared_i2connect_server_version=$(jq -r '.dependencies."@i2analyze/i2connect"' <"${package_json_file_path}")

  print "Running validatei2ConnectVersions tool"

  docker run -it --rm \
    -e "CONNECTOR_NAME=${connector_name}" \
    -e "CONNECTOR_TYPE=${connector_type}" \
    -e "CONFIG_I2CONNECT_SERVER_VERSION=${config_i2connect_server_version}" \
    -e "DECLARED_I2CONNECT_SERVER_VERSION=${declared_i2connect_server_version}" \
    -e "CONFIG_CONNECTOR_VERSION=${config_connector_version}" \
    -e "DECLARED_CONNECTOR_VERSION=${declared_connector_version}" \
    -e "YES_FLAG=${YES_FLAG}" \
    -v "${ANALYZE_CONTAINERS_ROOT_DIR}/utils:/opt/utils" \
    "${NODEJS_IMAGE_NAME}:${NODEJS_IMAGE_VERSION}" \
    "/opt/utils/containers/validate-i2-connect-versions"
}

function find_and_copy_file_with_folder_structure() {
  local file_name="${1}"
  local from_folder="${2}"
  local to_folder="${3}"
  local result

  pushd "${from_folder}" >/dev/null
  result=$(find . -name "${file_name}" -type f -exec cp --parents {} "${to_folder}" \; | wc -l)
  popd >/dev/null
  (("${result}" == 0))
}

function extract_connector_dist() {
  local connector_name="${1}"
  local connector_dir="${CONNECTOR_IMAGES_DIR}/${connector_name}"
  local archive_files

  readarray -d '' archive_files < <(find -L "${connector_dir}" -maxdepth 1 \( -name "*.tgz" -o -name "*.tar.gz" \) -type f -print0)

  if [[ "${#archive_files[@]}" -gt 1 ]]; then
    print_error_and_exit "There is more than one .tgz archive in the ${connector_name} directory. Ensure that only one .tgz file is present."
  fi

  if [[ ! -f "${archive_files[0]}" ]]; then
    print_error_and_exit "Cannot find a .tgz archive in the ${connector_name} directory. Ensure that there is a .tgz file present."
  fi
  delete_folder_if_exists_and_create "${connector_dir}/.app"
  cp -Rf "${connector_dir}/app/." "${connector_dir}/.app"
  tar -zxf "${archive_files[0]}" --strip-components=1 -C "${connector_dir}/app"

  # Override settings.json with .env and .env.sample (previously connector.conf.json), if there is none then get the default from the archive
  if find_and_copy_file_with_folder_structure "${CONNECTOR_CONFIG_FILE}" "${connector_dir}/.app" "${connector_dir}/app"; then
    find_and_copy_file_with_folder_structure "${CONNECTOR_CONFIG_FILE}" "${connector_dir}/app" "${connector_dir}/.app"
  fi
  if find_and_copy_file_with_folder_structure "${CONNECTOR_ENV_FILE}" "${connector_dir}/.app" "${connector_dir}/app"; then
    find_and_copy_file_with_folder_structure "${CONNECTOR_ENV_FILE}" "${connector_dir}/app" "${connector_dir}/.app"
  fi
  if find_and_copy_file_with_folder_structure "${CONNECTOR_ENV_SAMPLE_FILE}" "${connector_dir}/.app" "${connector_dir}/app"; then
    find_and_copy_file_with_folder_structure "${CONNECTOR_ENV_SAMPLE_FILE}" "${connector_dir}/app" "${connector_dir}/.app"
  fi
  if find_and_copy_file_with_folder_structure "${OLD_CONNECTOR_CONFIG_FILE}" "${connector_dir}/.app" "${connector_dir}/app"; then
    find_and_copy_file_with_folder_structure "${OLD_CONNECTOR_CONFIG_FILE}" "${connector_dir}/app" "${connector_dir}/.app"
  fi

  # Override previously connector.secrets.json, if there is none then get the default from the archive
  if find_and_copy_file_with_folder_structure "${OLD_CONNECTOR_SECRETS_FILE}" "${connector_dir}/.app" "${connector_dir}/app"; then
    find_and_copy_file_with_folder_structure "${OLD_CONNECTOR_SECRETS_FILE}" "${connector_dir}/app" "${connector_dir}/.app"
  fi

  # Touch all files to force no cache of the connector image.
  # This is required given `npm pack` sets date Oct 26th 1985 in all files.
  # Docker cache only checks size and modified date so for character changes (version change) this is a must have.
  find "${connector_dir}/app/" -type f -exec touch {} \;
}

function clean_up_connector_dist() {
  local connector_name="${1}"
  local connector_dir="${CONNECTOR_IMAGES_DIR}/${connector_name}"

  delete_folder_if_exists "${connector_dir}/app"
  #Restore to before build stage
  cp -R "${connector_dir}/.app/." "${connector_dir}/app"
  delete_folder_if_exists "${connector_dir}/.app"
}

function build_connector_images() {
  local connector_image_dir
  print "Building connectors"

  for connector_name in "${CONNECTORS_ARRAY[@]}"; do
    connector_image_dir="${CONNECTOR_IMAGES_DIR}/${connector_name}"
    [[ ! -d "${connector_image_dir}" ]] && continue

    if ! check_connector_changed "${connector_name}"; then
      continue
    fi
    if [[ "${connector_type}" != "${EXTERNAL_CONNECTOR_TYPE}" ]]; then
      delete_container "${CONNECTOR_PREFIX}${connector_name}"
    fi
    build_image "${connector_image_dir}"

    # Update old shasum for connector
    mv "${PREVIOUS_CONNECTOR_IMAGES_DIR}/${connector_name}.sha512.new" "${PREVIOUS_CONNECTOR_IMAGES_DIR}/${connector_name}.sha512"
  done
}

function build_image() {
  local connector_image_dir="${1}"
  local connector_name="${connector_image_dir##*/}"
  local connector_tag
  local connector_type

  connector_type=$(jq -r '.type' <"${connector_image_dir}/connector-definition.json")

  if [[ "${connector_type}" == "${EXTERNAL_CONNECTOR_TYPE}" ]]; then
    return
  fi

  # Validate connector and sdk versions
  if [[ "${connector_type}" == "${I2CONNECT_SERVER_CONNECTOR_TYPE}" ]]; then
    extract_connector_dist "${connector_name}"
    validate_connector_version "${connector_name}" "${connector_type}" || (clean_up_connector_dist "${connector_name}" && exit 1)
  fi

  connector_tag=$(jq -r '.tag' <"${connector_image_dir}/connector-version.json")

  # Set connector image name
  connector_image_name="${CONNECTOR_IMAGE_BASE_NAME}${connector_name}:${connector_tag}"

  # Build the image
  print "Building connector image: ${connector_image_name}"
  docker build -t "${connector_image_name}" "${CONNECTOR_IMAGES_DIR}/${connector_name}" \
    --build-arg NODEJS_BASE_IMAGE="${NODEJS_IMAGE_NAME}:${NODEJS_IMAGE_VERSION}" \
    --build-arg SPRINGBOOT_BASE_IMAGE="${SPRINGBOOT_IMAGE_NAME}:${SPRINGBOOT_IMAGE_VERSION}"

  if [[ "${connector_type}" == "${I2CONNECT_SERVER_CONNECTOR_TYPE}" ]]; then
    clean_up_connector_dist "${connector_name}"
  fi
}

function main() {
  ###############################################################################
  # Creating Docker network                                                     #
  ###############################################################################
  create_docker_network "${DOMAIN_NAME}"

  ###############################################################################
  # Set a list of all running containers                                        #
  ###############################################################################
  IFS=' ' read -ra ALL_RUNNING_CONTAINER_NAMES <<<"$(docker ps --format "{{.Names}}" -f network="${DOMAIN_NAME}" -f name="^${CONNECTOR_PREFIX}" | xargs)"

  ###############################################################################
  # Build Connector Images                                                      #
  ###############################################################################
  build_asset_array "connector" "connector-images"
  validate_connectors_exist
  build_connector_images
}

main "$@"
