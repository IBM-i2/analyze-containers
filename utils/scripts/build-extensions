#!/usr/bin/env bash
# i2, i2 Group, the i2 Group logo, and i2group.com are trademarks of N.Harris Computer Corporation.
# Â© N.Harris Computer Corporation (2022-2023)
#
# SPDX short identifier: MIT

set -e

USAGE="""
Usage:
  build-extensions -c <config_name> [-y] [-v]
  build-extensions -c <config_name> [-i <extension1_name>] [-e <extension1_name>] [-y] [-v]
  build-extensions -h

Options:
  -c <config_name>      Name of the config to use.
  -i <extension_name>   Names of the extensions to deploy and update. To specify multiple extensions, add additional -i options.
  -e <extension_name>   Names of the extensions to deploy and udapte. To specify multiple extensions, add additional -e options.
  -v                    Verbose output.
  -y                    Answer 'yes' to all prompts.
  -h                    Display the help.
  
"""

source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/common_functions.sh"
OPTIONS_FOR="build_extensions"
parse_arguments "$@"

if [[ "${INCLUDED_EXTENSIONS[*]}" && "${EXCLUDED_EXTENSIONS[*]}" ]]; then
  print_error "Incompatible options: Both (-i) and (-e) were specified."
  print_usage 1
fi

# Load common functions
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/server_functions.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/client_functions.sh"

# Load common variables
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/simulated_external_variables.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/common_variables.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/utils/internal_helper_variables.sh"
source "${ANALYZE_CONTAINERS_ROOT_DIR}/version.conf"

function remove_jar_from_maven_local() {
  local group_id="${1}"
  local artifact_id="${2}"

  mvn dependency:purge-local-repository -DmanualInclude="${group_id}:${artifact_id}"
}

function is_rebuild_required() {
  local artifact_id="$1"
  local artifact_dir="${EXTENSIONS_DIR}/${artifact_id}"

  current_checksum=$(get_check_sum_of_dir "${artifact_dir}" "*/target/*")
  if [[ -f "${PREVIOUS_EXTENSIONS_DIR}/${artifact_id}.sha512" ]]; then
    previous_checksum=$(cat "${PREVIOUS_EXTENSIONS_DIR}/${artifact_id}.sha512")
    if [[ "${previous_checksum}" == "${current_checksum}" ]]; then
      echo "false"
      return
    fi
  fi
  echo "true"
}

function build_extension() {
  local artifact_id="$1"
  local artifact_dir="${EXTENSIONS_DIR}/${artifact_id}"
  local extension_dependencies_path="${EXTENSIONS_DIR}/extension-dependencies.json"
  local dependencies
  local rebuild_dependencies="false"
  local rebuild_extension="false"

  create_folder "${PREVIOUS_EXTENSIONS_DIR}"

  if [[ ! -d "${artifact_dir}" ]]; then
    print_error_and_exit "Artifact ${artifact_id} does NOT exist"
  fi

  IFS=' ' read -ra dependencies <<<"$(jq -r --arg name "${artifact_id}" '.[] | select(.name == $name) | .dependencies[]' "${extension_dependencies_path}" | xargs)"

  for dependency in "${dependencies[@]}"; do
    rebuild_dependencies=$(is_rebuild_required "${dependency}")
    if [[ "${rebuild_dependencies}" == "true" ]]; then
      build_extension "${dependency}"
    fi
  done

  rebuild_extension=$(is_rebuild_required "${artifact_id}")
  if [[ "${rebuild_extension}" == "true" || "${rebuild_dependencies}" == "true" ]]; then
    build_extension_jar "${artifact_dir}" "${artifact_id}"
    current_checksum=$(get_check_sum_of_dir "${artifact_dir}" "*/target/*")
    echo "${current_checksum}" >"${PREVIOUS_EXTENSIONS_DIR}/${artifact_id}.sha512"
  fi
}

function build_extension_jar() {
  local artifact_dir="$1"
  local artifact_id="$2"

  if [[ ! -f "${artifact_dir}/pom.xml" ]]; then
    print_error_and_exit "Missing pom.xml file for extension '${artifact_id}'"
  fi
  print "Creating Extension: ${artifact_id}"
  cd "${artifact_dir}"
  mvn install -Doutput.dir="${artifact_dir}/target" -Di2analyze.root.dir="${ANALYZE_CONTAINERS_ROOT_DIR}"
}

function clean_artifacts() {
  print "Cleaning all deployed artifacts"
  wait_for_user_reply "Are you sure you want to run the 'clean' task? This will permanently remove data from the deployment."

  remove_jar_from_maven_local "com.i2group" "apollo-legacy"
  remove_jar_from_maven_local "com.i2group" "disco-api"
  remove_jar_from_maven_local "com.i2group" "daod"
  remove_jar_from_maven_local "com.i2group" "disco-utils"
}

function set_up_modules_in_parent_pom() {
  local pom_path="${ANALYZE_CONTAINERS_ROOT_DIR}/i2a-extensions/pom.xml"
  local extension_name

  xmlstarlet edit -L \
    --delete "/project/modules" \
    --subnode "/project" --type elem -n "modules" \
    "${pom_path}"
  for extension in "${ANALYZE_CONTAINERS_ROOT_DIR}/i2a-extensions/"*; do
    extension_name="$(basename "${extension}")"
    if [[ ! -d "${extension}" || "${extension_name}" == "target" ]]; then
      continue
    fi
    xmlstarlet edit -L \
      --subnode "/project/modules" --type elem -n "module" \
      --update "/project/modules/module[last()]" --value "${extension_name}" \
      "${pom_path}"
  done
}

function main() {
  ###############################################################################
  # Build Extensions                                                            #
  ###############################################################################
  build_asset_array "extension" "i2a-extensions" "target"
  for extension_name in "${EXTENSIONS_ARRAY[@]}"; do
    build_extension "${extension_name}"
  done
  set_up_modules_in_parent_pom
}

main "$@"
